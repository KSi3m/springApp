<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-4.2.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.0.xsd

">
    <!-- twoja paczka z beanmi -->

    <context:component-scan base-package="org.example"/>
    <sec:global-method-security pre-post-annotations="enabled"/>

    <!-- adnotacje -->
    <mvc:annotation-driven/>
    <mvc:view-controller path="/login"/>
    <mvc:view-controller path="/logout"/>
    <mvc:interceptors>
        <bean class="org.example.utilities.IPAddressInterceptor"/>
    </mvc:interceptors>

    <!-- MVC view resolver -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="bcrypt"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!-- zrodlo i polaczenie z baza stosujemy c3p0 →
   Pula polaczen — otwiera i przechowuje polaczenia. Nie ma potrzeby tworzenia nowego polaczenia
   za każdym razem, co poprawia wydajność całego systemu.-->
    <bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>
        <property name="jdbcUrl" value=""/>
        <property name="user" value=""/>
        <property name="password" value=""/>
        <!-- these are connection pool properties for C3P0 -->
        <property name="minPoolSize" value="2"/>
        <property name="maxPoolSize" value="100"/>
        <property name="maxIdleTime" value="20000"/>
    </bean>
    <!-- Hibernate session factory //+znane nam wstrzykiwanie zaleznosci w beanow -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <property name="packagesToScan" value="org.example.entity"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
            </props>
        </property>
    </bean>
    <!--Hibernate transaction manager -->
    <bean id="myTransactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate"/>


    <!-- Pozwala na automatyczna obsluge transkacji bez pisania dodatkowego kodu -->
    <tx:annotation-driven transaction-manager="myTransactionManager"/>
    <!-- katalog z zasobami strony, zdjecia, skrypty, style -->
    <mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>


    <bean id="csrfMatcher" class="org.springframework.security.web.util.matcher.AndRequestMatcher">
        <constructor-arg>
            <util:list value-type="org.springframework.security.web.util.matcher.NegatedRequestMatcher">
                <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                    <constructor-arg name="pattern" value="/payment/notify"/>
                    <constructor-arg name="httpMethod" value="POST"/>
                </bean>

            </util:list>
        </constructor-arg>
    </bean>
    <sec:http>
        <!-- <sec:intercept-url pattern="/" access="permitAll()"/> -->
        <sec:csrf request-matcher-ref="csrfMatcher"/>

        <sec:intercept-url pattern="/register" access="permitAll()"/>
        <sec:intercept-url pattern="/login" access="isAnonymous()"/>
        <sec:intercept-url pattern="/logout" access="isAuthenticated()"/>
        <sec:intercept-url pattern="/books/list" access="permitAll()"/>
        <sec:intercept-url pattern="/categories/list" access="permitAll()"/>
        <sec:intercept-url pattern="/authors/list" access="permitAll()"/>
        <sec:intercept-url pattern="/payment/notify" method="POST" access="permitAll()"/>
        <sec:intercept-url pattern="/payment/**" access="permitAll()"/>


        <sec:intercept-url pattern="/books/**" access="hasAuthority('ROLE_ADMIN')"/>
        <sec:intercept-url pattern="/authors/**" access="hasAuthority('ROLE_ADMIN')"/>
        <sec:intercept-url pattern="/categories/**" access="hasAuthority('ROLE_ADMIN')"/>
        <sec:intercept-url pattern="/cart/**" access="hasAuthority('ROLE_USER') or hasAuthority('ROLE_ADMIN')"/>
        <!-- ...i każde inne ednpointy, które stworzyliśmy … -->
        <sec:intercept-url pattern="/order/saveOrder" access="hasAuthority('ROLE_USER')"/>
        <sec:intercept-url pattern="/order/list" access="hasAuthority('ROLE_ADMIN') or hasAuthority('ROLE_USER')"/>
        <sec:intercept-url pattern="/order/complete" access="hasAuthority('ROLE_ADMIN')"/>
        <!-- <sec:intercept-url pattern="/**" access="hasAuthority('ROLE_ADMIN')"/> -->
        <sec:form-login login-page="/login"/>
        <sec:logout logout-success-url="/"/>
    </sec:http>
    <!-- ustawiamy dane dotyczące kodowania i zródła danych dotyczących autentykacji -->
    
    <sec:authentication-manager>
        <sec:authentication-provider>
            <sec:password-encoder ref="bcrypt"/>
            <sec:jdbc-user-service data-source-ref="myDataSource"/>
        </sec:authentication-provider>
    </sec:authentication-manager>


</beans>